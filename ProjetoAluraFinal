{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOyVw8gJLEtEjW7u5wxzwPY",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/julianahagen/SistemaAprendizagemAgentes/blob/main/ProjetoAluraFinal\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Sistema de Aprendizado Interativo com Agentes**\n",
        "\n",
        "Este notebook implementa um sistema de aprendizado interativo utilizando múltiplos agentes para guiar o usuário no estudo de um tópico, incluindo busca de informação, redação de aula,material de revisão, questionário e sugestões de aprofundamento, com opção de salvar o histórico localmente.\n",
        "\n",
        "Desenvolvido com base na Imersão IA Alura + Google e o Google Agent Development Kit (ADK).\n",
        "\n",
        "Sugestão de Melhoria Futura: Integrar com Google Docs ou Google Drive para salvar documentos online.\n",
        "\n",
        "Feito por: Juliana Hagen, com a ajudo do Google Gemini - Assistente Python"
      ],
      "metadata": {
        "id": "uj7uME5lklzA"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# @title Instalações e Importações Necessárias\n",
        "# Instalar bibliotecas\n",
        "%pip -q install google-genai google-adk python-dotenv\n",
        "\n",
        "# Importar bibliotecas\n",
        "import os\n",
        "from google.colab import userdata\n",
        "from google import genai\n",
        "from google.adk.agents import Agent\n",
        "from google.adk.runners import Runner\n",
        "from google.adk.sessions import InMemorySessionService\n",
        "from google.adk.tools import google_search # Importação correta da ferramenta de busca (lowercase)\n",
        "from google.genai import types\n",
        "from datetime import date\n",
        "import textwrap\n",
        "from IPython.display import display, Markdown, clear_output\n",
        "import requests # Necessário para verificar links\n",
        "import warnings\n",
        "import re # Necessário para extrair URLs\n",
        "import time # Pode ser útil para delays (opcional)\n",
        "\n",
        "# Ignorar avisos (opcional, útil para manter a saída limpa)\n",
        "warnings.filterwarnings(\"ignore\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wx0axHX5k5WC",
        "outputId": "90099890-bfe5-4448-8d4e-870d5ea73448"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.2/1.2 MB\u001b[0m \u001b[31m18.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m232.1/232.1 kB\u001b[0m \u001b[31m12.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m95.2/95.2 kB\u001b[0m \u001b[31m6.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m217.1/217.1 kB\u001b[0m \u001b[31m12.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m334.1/334.1 kB\u001b[0m \u001b[31m19.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m125.1/125.1 kB\u001b[0m \u001b[31m7.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m65.8/65.8 kB\u001b[0m \u001b[31m3.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m119.0/119.0 kB\u001b[0m \u001b[31m7.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m194.9/194.9 kB\u001b[0m \u001b[31m12.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m62.5/62.5 kB\u001b[0m \u001b[31m3.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m103.3/103.3 kB\u001b[0m \u001b[31m7.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m44.4/44.4 kB\u001b[0m \u001b[31m2.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m72.0/72.0 kB\u001b[0m \u001b[31m4.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25h"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# @title Configuração da API Key e Cliente Gemini\n",
        "# Configura a API Key do Google Gemini\n",
        "# É recomendado salvar sua API Key como um \"Secret\" no Google Colab\n",
        "# Vá no ícone de chave (🔑) na barra lateral esquerda, clique em \"+ New secret\"\n",
        "# Crie um Secret chamado GOOGLE_API_KEY e cole sua chave lá.\n",
        "# Se você estiver rodando fora do Colab, pode precisar usar variáveis de ambiente ou um arquivo .env\n",
        "try:\n",
        "    # Tenta obter a API Key dos secrets do Colab\n",
        "    API_KEY = userdata.get('GOOGLE_API_KEY')\n",
        "    if not API_KEY:\n",
        "        # Se não encontrar nos secrets, tenta de variáveis de ambiente (para rodar localmente, por exemplo)\n",
        "        API_KEY = os.environ.get(\"GOOGLE_API_KEY\")\n",
        "        if not API_KEY:\n",
        "             raise ValueError(\"API Key não encontrada nos secrets do Colab ou variáveis de ambiente.\")\n",
        "    os.environ[\"GOOGLE_API_KEY\"] = API_KEY # Define a variável de ambiente que o SDK do GenAI procura\n",
        "    print(\"✅ API Key configurada.\")\n",
        "except userdata.NotebookAccessError:\n",
        "    print(\"Por favor, habilite o 'Notebook access' para ler secrets no Colab (ícone de chave na barra lateral).\")\n",
        "except ValueError as e:\n",
        "    print(f\"Erro ao obter a API Key: {e}\")\n",
        "    print(\"Certifique-se de ter salvo sua chave como um Secret chamado GOOGLE_API_KEY no Colab.\")\n",
        "except Exception as e:\n",
        "    print(f\"Ocorreu um erro inesperado ao configurar a API Key: {e}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EoIg-hlXlQqv",
        "outputId": "db6691a2-7133-410d-c770-a7195d5266cf"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "✅ API Key configurada.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Configura o cliente da SDK do Gemini\n",
        "try:\n",
        "    client = genai.Client()\n",
        "    MODEL_ID = \"gemini-2.0-flash\" # Modelo a ser usado pelos agentes por padrão. Pode ser alterado.\n",
        "    print(\"✅ Cliente Gemini configurado com sucesso.\")\n",
        "except Exception as e:\n",
        "    print(f\"❌ Erro ao configurar o cliente Gemini: {e}\")\n",
        "    print(\"Verifique sua API Key e sua conexão com a internet.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "K2kwjG4glY7-",
        "outputId": "5ff3f153-893c-4c32-d9f0-e8573c8c1539"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "✅ Cliente Gemini configurado com sucesso.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# @title Funções Auxiliares (call_agent, to_markdown, verificar links)\n",
        "\n",
        "# Função auxiliar que envia uma mensagem para um agente via Runner e retorna a resposta final\n",
        "# Esta função foi revisada para garantir que a instância de Runner é criada corretamente dentro dela.\n",
        "def call_agent(agent: Agent, message_text: str) -> str:\n",
        "    # Cria um serviço de sessão em memória. Cada chamada é uma nova sessão por padrão aqui.\n",
        "    # Para interações multi-turno contínuas com o MESMO agente (como no quiz),\n",
        "    # uma única instância de session_service e session DEVE ser mantida e reutilizada\n",
        "    # nas chamadas subsequentes para o mesmo agente. A implementação abaixo no fluxo principal\n",
        "    # para o quiz tenta simular isso passando todo o histórico na entrada a cada turno,\n",
        "    # já que call_agent inicia uma nova sessão sempre. Uma implementação mais robusta\n",
        "    # do quiz usaria diretamente a classe Runner fora desta função call_agent.\n",
        "    session_service = InMemorySessionService()\n",
        "    # Cria uma nova sessão\n",
        "    session = session_service.create_session(app_name=agent.name, user_id=\"user1\", session_id=\"session1\")\n",
        "    # Cria a instância de Runner para este agente e sessão. ESTA LINHA É CRUCIAL.\n",
        "    runner = Runner(agent=agent, app_name=agent.name, session_service=session_service)\n",
        "    # Cria o conteúdo da mensagem de entrada\n",
        "    content = types.Content(role=\"user\", parts=[types.Part(text=message_text)])\n",
        "\n",
        "    final_response = \"\"\n",
        "    try:\n",
        "        # Itera pelos eventos retornados durante a execução do agente\n",
        "        # Em um ambiente assíncrono real, usaria 'async for' e 'await'\n",
        "        for event in runner.run(user_id=\"user1\", session_id=\"session1\", new_message=content):\n",
        "            if event.is_final_response():\n",
        "                for part in event.content.parts:\n",
        "                    if part.text is not None:\n",
        "                        final_response += part.text\n",
        "        return final_response.strip()\n",
        "    except Exception as e:\n",
        "        print(f\"❌ Erro durante a execução do agente {agent.name}: {e}\")\n",
        "        # Imprimir o traceback completo para depuração pode ser útil durante o desenvolvimento\n",
        "        # import traceback\n",
        "        # traceback.print_exc()\n",
        "        return f\"Desculpe, o agente {agent.name} encontrou um erro ao processar sua solicitação.\"\n",
        "\n",
        "\n",
        "# Função auxiliar para exibir texto formatado em Markdown no Colab\n",
        "def to_markdown(text):\n",
        "    # Substitui marcadores de lista comuns por marcadores Markdown para melhor renderização\n",
        "    # Substitui o espaço antes do '*' para 4 espaços, padrão para listas aninhadas em Markdown\n",
        "    text = text.replace('•', '    *')\n",
        "    # Retorna o texto como objeto Markdown para o Colab interpretar\n",
        "    return Markdown(text)\n",
        "\n",
        "# Função auxiliar para extrair URLs do texto\n",
        "def extract_urls(text):\n",
        "    # Expressão regular para encontrar URLs que começam com http ou https\n",
        "    # Adapte se o formato de saída do agente variar muito (ex: links sem http/https)\n",
        "    url_pattern = re.compile(r'https?://[^\\s\\'\"]+')\n",
        "    return url_pattern.findall(text)\n",
        "\n",
        "# Função auxiliar para verificar se uma URL está ativa\n",
        "def is_url_active(url, timeout=5):\n",
        "    try:\n",
        "        # Tenta fazer uma requisição HEAD primeiro (mais rápida, só pede o cabeçalho)\n",
        "        # Permite redirecionamentos (allow_redirects=True por padrão para HEAD)\n",
        "        response = requests.head(url, timeout=timeout, allow_redirects=True)\n",
        "        # Verifica se o status code indica sucesso (2xx)\n",
        "        response.raise_for_status() # Lança exceções para códigos de erro (4xx, 5xx)\n",
        "        return True\n",
        "    except requests.exceptions.RequestException:\n",
        "        # Captura todos os erros de requisição (timeout, conexão, http errors como 404, 500)\n",
        "        return False\n",
        "    except Exception as e:\n",
        "        # Captura outros erros inesperados\n",
        "        # print(f\"Erro inesperado ao verificar URL {url}: {e}\") # Opcional para depuração\n",
        "        return False\n"
      ],
      "metadata": {
        "id": "5O4YrPqhlgG2"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# @title Definição dos Agentes (Instruções Ajustadas)\n",
        "\n",
        "# --- Agente 1: Agente Recepcionista ---\n",
        "# Função para criar e configurar o Agente Recepcionista\n",
        "def criar_agente_recepcionista():\n",
        "    print(f\"Configurando o Agente Recepcionista...\")\n",
        "    agente = Agent(\n",
        "        name=\"agente_recepcionista\",\n",
        "        model=MODEL_ID,\n",
        "        instruction=\"\"\"\n",
        "        Você é um professor atencioso que vai preparar uma aula especial para um aluno.\n",
        "        Seu objetivo principal é entender o perfil do aluno para adaptar o conteúdo.\n",
        "\n",
        "        Você receberá uma MENSAGEM DE ENTRADA que conterá o TÓPICO e a DATA de hoje, possivelmente seguido por respostas do aluno.\n",
        "        Formato esperado da entrada inicial:\n",
        "        TÓPICO: [Assunto]\n",
        "        DATA: [Data]\n",
        "        ---\n",
        "        [Instrução para iniciar]\n",
        "\n",
        "        Formato esperado da entrada com respostas:\n",
        "        Respostas do Aluno:\n",
        "        Nível: [resposta]\n",
        "        Público/Complexidade: [resposta]\n",
        "        Estilo: [resposta]\n",
        "        ---\n",
        "        [Instrução para processar]\n",
        "\n",
        "        Na sua PRIMEIRA interação (quando receber o TÓPICO e a DATA):\n",
        "        1. Extraia o TÓPICO e a DATA da mensagem de entrada.\n",
        "        2. Apresente-se brevemente como o professor que preparará a aula.\n",
        "        3. Faça AS SEGUINTES perguntas ao aluno sobre o TÓPICO para coletar o perfil dele:\n",
        "           - Qual é o seu nível de conhecimento prévio sobre o tópico? (Sugira opções como nenhum, básico, intermediário, avançado)\n",
        "           - Para qual público ou nível de complexidade a explicação deve ser adaptada? (Sugira opções como para mim mesmo, para uma criança, para alguém sem conhecimento na área, nível universitário)\n",
        "           - De que forma você prefere a explicação? (Sugira opções como mais resumida, bem detalhada, com muitos exemplos práticos)\n",
        "        NÃO comece a falar sobre o tópico ainda.\n",
        "\n",
        "        Em uma interação SUBSEQUENTE (quando receber as RESPOSTAS DO ALUNO):\n",
        "        1. Extraia as respostas da mensagem de entrada.\n",
        "        2. Consolide as respostas em um breve resumo conciso do perfil de aprendizado (Nível: [resposta], Público/Complexidade: [resposta], Estilo: [resposta]) para o TÓPICO.\n",
        "        3. Sua entrega final nesta interação SUBSEQUENTE é APENAS o resumo do perfil.\n",
        "        \"\"\",\n",
        "        description=\"Agente que conversa com o estudante para entender seu perfil e necessidades.\",\n",
        "        tools=[]\n",
        "    )\n",
        "    return agente"
      ],
      "metadata": {
        "id": "RYLa1w26lkEw"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# --- Agente 2: Agente Buscador ---\n",
        "# Função para criar e configurar o Agente Buscador\n",
        "def criar_agente_buscador():\n",
        "    print(\"Configurando o Agente Buscador...\")\n",
        "    agente = Agent(\n",
        "        name=\"agente_buscador\",\n",
        "        model=MODEL_ID,\n",
        "        instruction=\"\"\"\n",
        "        Você é um assistente de pesquisa especializado em encontrar informações relevantes e atualizadas na internet\n",
        "        usando a ferramenta de busca do Google ('google_search').\n",
        "\n",
        "        Você receberá uma MENSAGEM DE ENTRADA que conterá o TÓPICO da busca e um PERFIL DO ALUNO.\n",
        "        Formato esperado da entrada:\n",
        "        TÓPICO da busca: [Assunto]\n",
        "        PERFIL DO ALUNO para adaptar a busca: [Perfil Sumarizado]\n",
        "        ---\n",
        "        [Instrução para executar a busca]\n",
        "\n",
        "        Sua tarefa é:\n",
        "        1. Extrair o TÓPICO e o PERFIL DO ALUNO da mensagem de entrada.\n",
        "        2. Usar a ferramenta 'Google Search' para encontrar as informações mais importantes e relevantes sobre o TÓPICO.\n",
        "        3. Adapte suas perguntas de busca ('Google Search' queries) considerando o PERFIL DO ALUNO para obter resultados adequados ao nível e complexidade desejados. Priorize resultados RECENTES e de fontes confiáveis.\n",
        "        4. Sua entrega final deve ser um resumo conciso com os PONTOS-CHAVE encontrados na busca que sejam mais relevantes para o tópico e o perfil do aluno.\n",
        "        5. Inclua os links (URLs) das fontes mais importantes encontradas para referência.\n",
        "        NÃO comece a explicar o assunto em detalhe, apenas entregue os pontos-chave e as fontes.\n",
        "        \"\"\",\n",
        "        description=\"Agente que busca informações sobre um tópico na internet.\",\n",
        "        tools=[google_search] # Habilita a ferramenta Google Search\n",
        "    )\n",
        "    return agente"
      ],
      "metadata": {
        "id": "fkf-f_Yjl0pC"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# --- Agente 3: Agente Redator ---\n",
        "# Função para criar e configurar o Agente Redator\n",
        "def criar_agente_redator():\n",
        "    print(\"Configurando o Agente Redator...\")\n",
        "    agente = Agent(\n",
        "        name=\"agente_redator\",\n",
        "        model=MODEL_ID,\n",
        "        instruction=\"\"\"\n",
        "        Você é um professor habilidoso em transformar informações complexas em aulas fáceis de entender.\n",
        "\n",
        "        Você receberá uma MENSAGEM DE ENTRADA que conterá:\n",
        "        TÓPICO da Aula: [Assunto]\n",
        "        PERFIL DO ALUNO: [Perfil Sumarizado]\n",
        "        RESULTADOS DA BUSCA (Pontos-Chave e Fontes):\n",
        "        [Resultados da Busca]\n",
        "        ---\n",
        "        [Instrução para redigir]\n",
        "\n",
        "        Sua tarefa é:\n",
        "        1. Extrair o TÓPICO, o PERFIL DO ALUNO e os RESULTADOS DA BUSCA da mensagem de entrada.\n",
        "        2. Criar uma explicação detalhada e envolvente sobre o TÓPICO.\n",
        "        3. **É ESSENCIAL** que você adapte completamente a linguagem, a profundidade da explicação e os exemplos ao PERFIL DO ALUNO fornecido.\n",
        "        4. Use os RESULTADOS DA BUSCA como a base de conteúdo para a sua explicação. NÃO invente informações que não estejam nos resultados ou sejam de conhecimento geral sobre o tópico.\n",
        "        5. Estruture a aula de forma lógica e didática (introdução, desenvolvimento, conclusão).\n",
        "        6. Se apropriado para o tópico e o nível do aluno, sugira visualizações (como diagramas, gráficos) ou tipos de exemplos práticos.\n",
        "        7. Mencione que as fontes utilizadas estão disponíveis.\n",
        "\n",
        "        Sua entrega final é o texto completo da aula, pronto para ser lido pelo aluno.\n",
        "        \"\"\",\n",
        "        description=\"Agente que redige o conteúdo da aula com base no tópico, perfil do aluno e resultados da busca.\",\n",
        "        tools=[]\n",
        "    )\n",
        "    return agente"
      ],
      "metadata": {
        "id": "z9nWudDPmBQE"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# --- Agente 4: Agente Review ---\n",
        "# Função para criar e configurar o Agente Review\n",
        "def criar_agente_review():\n",
        "    print(\"Configurando o Agente Review...\")\n",
        "    agente = Agent(\n",
        "        name=\"agente_review\",\n",
        "        model=MODEL_ID,\n",
        "        instruction=\"\"\"\n",
        "        Você é um assistente de revisão e consolidação de conteúdo, especializado em criar materiais de estudo complementares.\n",
        "\n",
        "        Você receberá uma MENSAGEM DE ENTRADA que conterá:\n",
        "        TÓPICO para Revisão: [Assunto]\n",
        "        PERFIL DO ALUNO: [Perfil Sumarizado]\n",
        "        RESULTADOS DA BUSCA Originais (para extrair fontes e pontos-chave para resumo):\n",
        "        [Resultados da Busca]\n",
        "        ---\n",
        "        [Instrução para gerar material de revisão]\n",
        "\n",
        "        Sua tarefa é gerar um material de revisão focado no essencial.\n",
        "        1. Extraia o TÓPICO, PERFIL DO ALUNO e RESULTADOS DA BUSCA da mensagem de entrada.\n",
        "        2. Liste claramente as FONTES (URLs) que foram fornecidas nos RESULTADOS DA BUSCA originais.\n",
        "        3. Crie um RESUMO em tópicos (bullet points) dos principais conceitos e fatos sobre o TÓPICO, baseando-se nos pontos-chave dos RESULTADOS DA BUSCA. Este resumo deve ser o MAIS SIMPLES e direto possível, totalmente adaptado ao NÍVEL e PÚBLICO do PERFIL DO ALUNO.\n",
        "\n",
        "        Formate sua resposta final da seguinte maneira:\n",
        "        ### Fontes Consultadas:\n",
        "        [Lista de URLs]\n",
        "\n",
        "        ### Resumo Rápido:\n",
        "        [Seu resumo adaptado ao perfil do aluno em bullet points]\n",
        "\n",
        "        Sua entrega final é este bloco de texto formatado.\n",
        "        \"\"\",\n",
        "        description=\"Agente que gera material de revisão: fontes, resumo em tópicos e sugestões visuais.\",\n",
        "        tools=[]\n",
        "    )\n",
        "    return agente"
      ],
      "metadata": {
        "id": "q-dhalVamE8n"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# --- Agente 5: Agente Dúvidas ---\n",
        "# Função para criar e configurar o Agente Dúvidas\n",
        "def criar_agente_duvidas():\n",
        "    print(\"Configurando o Agente Dúvidas...\")\n",
        "    agente = Agent(\n",
        "        name=\"agente_duvidas\",\n",
        "        model=MODEL_ID, # Precisa de capacidade para entender perguntas, buscar e adaptar a resposta\n",
        "        instruction=\"\"\"\n",
        "        Você é um assistente de estudo prestativo e especializado em responder perguntas sobre um tópico específico, buscando informações na internet se necessário e adaptando a resposta ao nível do usuário.\n",
        "\n",
        "        Você receberá MENSAGENS DE ENTRADA que conterão:\n",
        "        DÚVIDA DO ALUNO: [Pergunta do aluno]\n",
        "        TÓPICO GERAL: [Assunto principal da sessão]\n",
        "        PERFIL DO ALUNO: [Perfil Sumarizado]\n",
        "        CONTEÚDO ANTERIOR (para contexto): [Texto da Aula e Resumo da sessão]\n",
        "        ---\n",
        "        [Instrução para responder a dúvida]\n",
        "\n",
        "        Sua tarefa é:\n",
        "        1. Extrair a DÚVIDA DO ALUNO, TÓPICO GERAL, PERFIL DO ALUNO e CONTEÚDO ANTERIOR da mensagem de entrada.\n",
        "        2. Use a ferramenta 'google_search' para buscar informações que ajudem a responder à DÚVIDA DO ALUNO.\n",
        "        3. Considere o CONTEÚDO fornecido como base, mas use a busca para informações adicionais ou atualizadas se necessário.\n",
        "        4. Formule a resposta de forma clara e completa, **adaptando a linguagem e a profundidade EXATAMENTE ao PERFIL DO ALUNO**.\n",
        "        5. Se a pergunta do aluno NÃO for sobre o TÓPICO GERAL da sessão, diga educadamente que você só pode responder perguntas relacionadas ao TÓPICO atual.\n",
        "        6. Sua entrega final é APENAS a resposta adaptada à pergunta do aluno.\n",
        "        \"\"\",\n",
        "        description=\"Agente que responde dúvidas do aluno usando busca na internet.\",\n",
        "        tools=[google_search] # Habilita a ferramenta Google Search\n",
        "    )\n",
        "    return agente\n"
      ],
      "metadata": {
        "id": "0sxYjeeRmIUZ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# --- Agente 6: Agente Salvador Local ---\n",
        "# Função para criar e configurar o Agente Salvador (para salvamento LOCAL)\n",
        "# Renomeado de 7 para 6 pois removemos o Questionario (5)\n",
        "def criar_agente_salvador_local():\n",
        "    print(\"Configurando o Agente Salvador Local...\")\n",
        "    agente = Agent(\n",
        "        name=\"agente_salvador_local\",\n",
        "        model=MODEL_ID, # Um modelo simples é suficiente\n",
        "        instruction=\"\"\"\n",
        "        Você é o assistente responsável por arquivar a sessão de estudo.\n",
        "\n",
        "        Você receberá uma MENSAGEM DE ENTRADA que conterá TODO o conteúdo gerado durante esta sessão de estudo (a aula, o resumo, as sugestões, histórico de dúvidas).\n",
        "        Formato esperado da entrada:\n",
        "        CONTEÚDO COMPLETO DA SESSÃO:\n",
        "        [Todo o conteúdo concatenado]\n",
        "        ---\n",
        "        [Instrução para perguntar sobre salvar]\n",
        "\n",
        "        Sua única tarefa é:\n",
        "        1. Reconhecer que recebeu o conteúdo da sessão.\n",
        "        2. Perguntar ao aluno, de forma amigável, se ele gostaria de salvar todo este conteúdo da sessão para referência futura.\n",
        "        3. Mencione que o conteúdo pode ser salvo em um arquivo aqui no ambiente local.\n",
        "        NÃO salve o documento você mesmo, apenas formule e apresente a pergunta.\n",
        "\n",
        "        Sua entrega final é APENAS a pergunta para o aluno.\n",
        "        \"\"\",\n",
        "        description=\"Agente que pergunta ao usuário se deseja salvar o histórico da sessão de estudo localmente.\",\n",
        "        tools=[]\n",
        "    )\n",
        "    return agente"
      ],
      "metadata": {
        "id": "gdMqezKamLHA"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# @title Fluxo Principal de Execução (Salvamento Local)\n",
        "\n",
        "# --- Início do Fluxo Principal ---\n",
        "\n",
        "if __name__ == \"__main__\": # Garante que o código só roda quando o script é executado diretamente\n",
        "\n",
        "    data_de_hoje = date.today().strftime(\"%d/%m/%Y\")\n",
        "\n",
        "    print(\"📚 Iniciando o Sistema de Aprendizado Interativo com Agentes 🤖\")\n",
        "    print(\"-\" * 60)\n",
        "\n",
        "    # --- 1. Obter o Tópico do Usuário ---\n",
        "    topico_estudo = input(\"❓ Olá! Por favor, digite o ASSUNTO que você gostaria de estudar hoje: \")\n",
        "    print(\"-\" * 60)\n",
        "\n",
        "    if not topico_estudo:\n",
        "        print(\"❌ Você esqueceu de digitar o assunto! Encerrando.\")\n",
        "    else:\n",
        "        clear_output(wait=True) # Limpa a saída anterior no Colab para uma experiência mais fluida\n",
        "        print(f\"✨ Maravilha! Vamos então aprender sobre **{topico_estudo}**.\")\n",
        "        print(\"-\" * 60)\n",
        "\n",
        "        # --- 2. Interagir com o Agente Recepcionista para obter o Perfil do Aluno ---\n",
        "        agente_recepcionista_obj = criar_agente_recepcionista() # Cria o objeto agente\n",
        "\n",
        "        print(\"\\n🤝 Conversando com o Agente Recepcionista para entender seu perfil...\")\n",
        "        # Primeira chamada para o Recepcionista: Faz ele apresentar e fazer as perguntas\n",
        "        entrada_recepcionista_inicial = f\"\"\"\n",
        "TÓPICO: {topico_estudo}\n",
        "DATA: {data_de_hoje}\n",
        "---\n",
        "Iniciar coleta de perfil. Por favor, apresente-se e faça as perguntas para entender o perfil do aluno sobre o tópico.\n",
        "\"\"\"\n",
        "        resposta_do_agente = call_agent(\n",
        "            agente_recepcionista_obj,\n",
        "            entrada_recepcionista_inicial # Envia o tópico e data na entrada estruturada\n",
        "        )\n",
        "        display(to_markdown(resposta_do_agente)) # Exibe a apresentação e as perguntas do recepcionista\n",
        "\n",
        "        # Obter as respostas do usuário para as perguntas (multiplas entradas via input)\n",
        "        print(\"\\n📝 Por favor, responda às perguntas para que eu possa preparar a aula ideal para você.\")\n",
        "        nivel_conhecimento = input(\"Seu nível de conhecimento (nenhum, básico, etc.): \")\n",
        "        publico_alvo = input(\"Público/Complexidade (para mim, criança, sem área, etc.): \")\n",
        "        estilo_preferido = input(\"Estilo de explicação (resumida, detalhada, etc.): \")\n",
        "\n",
        "        # Formatar as respostas do usuário em uma única string estruturada para a SEGUNDA chamada ao Recepcionista\n",
        "        respostas_do_aluno_texto = f\"\"\"\n",
        "Nivel: {nivel_conhecimento}\n",
        "Publico/Complexidade: {publico_alvo}\n",
        "Estilo: {estilo_preferido}\n",
        "\"\"\"\n",
        "        clear_output(wait=True)\n",
        "        print(f\"✨ Vamos aprender sobre **{topico_estudo}**.\")\n",
        "        print(\"-\" * 60)\n",
        "        print(\"🤝 Respostas do perfil coletadas. Processando com Agente Recepcionista...\")\n",
        "\n",
        "        # Segunda chamada para o Recepcionista: Envia as respostas do usuário para ele processar e gerar o resumo do perfil\n",
        "        entrada_recepcionista_respostas = f\"\"\"\n",
        "TÓPICO: {topico_estudo} # Inclui tópico novamente para contexto, embora o agente deva lembrar\n",
        "DATA: {data_de_hoje}\n",
        "Respostas do Aluno:\n",
        "{respostas_do_aluno_texto}\n",
        "---\n",
        "Processar respostas e gerar perfil sumarizado.\n",
        "\"\"\"\n",
        "        perfil_do_aluno_sumarizado = call_agent(\n",
        "            agente_recepcionista_obj,\n",
        "            entrada_recepcionista_respostas # Envia as respostas do aluno na entrada estruturada\n",
        "        )\n",
        "        print(\"\\n✅ Perfil do Aluno Definido:\")\n",
        "        display(to_markdown(perfil_do_aluno_sumarizado)) # Exibe o perfil sumarizado\n",
        "        print(\"-\" * 60)\n",
        "\n",
        "        # --- 3. Chamar o Agente Buscador ---\n",
        "        agente_buscador_obj = criar_agente_buscador()\n",
        "\n",
        "        # Prepara a entrada para o Buscador (usa o tópico e o perfil sumarizado na entrada estruturada)\n",
        "        entrada_para_buscador = f\"\"\"\n",
        "TÓPICO da busca: {topico_estudo}\n",
        "PERFIL DO ALUNO para adaptar a busca: {perfil_do_aluno_sumarizado}\n",
        "---\n",
        "Por favor, use a ferramenta Google Search para encontrar os pontos chave e fontes relevantes.\n",
        "\"\"\"\n",
        "        print(\"\\n🔍 Chamando o Agente Buscador para encontrar informações...\")\n",
        "        resultados_da_busca = call_agent(\n",
        "            agente_buscador_obj,\n",
        "            entrada_para_buscador # Envia tópico e perfil na entrada estruturada\n",
        "        )\n",
        "        print(\"\\n--- 📝 Resultado da Busca (Pontos-Chave e Fontes) ---\\n\")\n",
        "        display(to_markdown(resultados_da_busca)) # Exibe os resultados da busca\n",
        "        print(\"-\" * 60)\n",
        "\n",
        "        # --- 4. Chamar o Agente Redator ---\n",
        "        agente_redator_obj = criar_agente_redator()\n",
        "\n",
        "        # Prepara a entrada para o Redator (usa tópico, perfil sumarizado e resultados da busca na entrada estruturada)\n",
        "        entrada_para_redator = f\"\"\"\n",
        "TÓPICO da Aula: {topico_estudo}\n",
        "PERFIL DO ALUNO: {perfil_do_aluno_sumarizado}\n",
        "RESULTADOS DA BUSCA (Pontos-Chave e Fontes):\n",
        "{resultados_da_busca}\n",
        "---\n",
        "Por favor, redija a aula completa baseada nessas informações e adaptada ao perfil do aluno.\n",
        "\"\"\"\n",
        "        print(\"\\n✍️ Chamando o Agente Redator para escrever a aula...\")\n",
        "        texto_final_aula = call_agent(\n",
        "            agente_redator_obj,\n",
        "            entrada_para_redator # Envia tópico, perfil e resultados na entrada estruturada\n",
        "        )\n",
        "        print(\"\\n--- 📚 Sua Aula Está Pronta! ---\\n\")\n",
        "        display(to_markdown(texto_final_aula)) # Exibe a aula\n",
        "        print(\"-\" * 60)\n",
        "\n",
        "# --- 5. Agente Dúvidas Interativo ---\n",
        "# Este bloco de código está fora do 'else' inicial, o que significa que ele sempre executará mesmo se o tópico não for digitado.\n",
        "# Para corrigir isso e garantir que a sessão de dúvidas só comece após a aula ser gerada (dentro do fluxo principal),\n",
        "# mova este bloco e os seguintes para dentro do 'else' principal.\n",
        "\n",
        "        agente_duvidas_obj = criar_agente_duvidas()\n",
        "        historico_duvidas = \"\" # Para armazenar o histórico das perguntas e respostas das dúvidas\n",
        "\n",
        "        print(\"\\n## 🤔 Tire Suas Dúvidas!\")\n",
        "        print(\"Estou pronto para responder suas perguntas sobre o tópico. Pergunte o que quiser!\")\n",
        "        print(\"Para encerrar a sessão de dúvidas e salvar o histórico, digite 'sair'.\")\n",
        "        print(\"-\" * 60)\n",
        "\n",
        "        # Loop de Dúvidas e Respostas\n",
        "        continuar_duvidas = True\n",
        "        while continuar_duvidas:\n",
        "            # Captura a dúvida do aluno ou comando de saída\n",
        "            duvida_aluno = input(\"Sua dúvida ou 'sair': \")\n",
        "\n",
        "            # Verifica se o aluno quer sair\n",
        "            if duvida_aluno.strip().lower() == 'sair':\n",
        "                print(\"\\nEncerrando a sessão de dúvidas.\")\n",
        "                continuar_duvidas = False # Sai do loop\n",
        "                break # Garante saída imediata\n",
        "\n",
        "            # Se o aluno não quer sair, prepara a entrada para o Agente Dúvidas\n",
        "            # É necessário gerar o material_revisao ANTES de usá-lo no contexto das dúvidas.\n",
        "            # Adicionar a chamada para o Agente Review aqui, ANTES do loop de dúvidas.\n",
        "\n",
        "            # --- Chamar o Agente Review ANTES do loop de dúvidas ---\n",
        "            agente_review_obj = criar_agente_review() # Cria o objeto agente\n",
        "\n",
        "            # Prepara a entrada para o Review\n",
        "            entrada_para_review = f\"\"\"\n",
        "TÓPICO para Revisão: {topico_estudo}\n",
        "PERFIL DO ALUNO: {perfil_do_aluno_sumarizado}\n",
        "RESULTADOS DA BUSCA Originais (para extrair fontes e pontos-chave para resumo):\n",
        "{resultados_da_busca}\n",
        "---\n",
        "Por favor, gere o material de revisão.\n",
        "\"\"\"\n",
        "            print(\"\\n✨ Gerando material de revisão...\")\n",
        "            material_revisao = call_agent(\n",
        "                agente_review_obj,\n",
        "                entrada_para_review\n",
        "            )\n",
        "            print(\"\\n--- 📖 Material de Revisão ---\\n\")\n",
        "            display(to_markdown(material_revisao))\n",
        "            print(\"-\" * 60)\n",
        "            # --- Fim da chamada ao Agente Review ---\n",
        "\n",
        "            # Se o aluno não quer sair, prepara a entrada para o Agente Dúvidas\n",
        "            entrada_para_duvidas = f\"\"\"\n",
        "DÚVIDA DO ALUNO: {duvida_aluno}\n",
        "TÓPICO GERAL: {topico_estudo}\n",
        "PERFIL DO ALUNO: {perfil_do_aluno_sumarizado}\n",
        "CONTEÚDO ANTERIOR (para contexto):\n",
        "{texto_final_aula}\n",
        "{material_revisao}\n",
        "---\n",
        "Por favor, responda a dúvida do aluno utilizando busca na internet e adaptando ao perfil.\n",
        "\"\"\"\n",
        "            print(\"\\nBuscando a resposta para sua dúvida...\")\n",
        "            # Chama o Agente Dúvidas\n",
        "            resposta_do_agente_duvidas = call_agent(\n",
        "                agente_duvidas_obj,\n",
        "                entrada_para_duvidas # Envia a dúvida e o contexto na entrada estruturada\n",
        "            )\n",
        "\n",
        "            # Adiciona a pergunta e resposta ao histórico ANTES de exibir\n",
        "            historico_duvidas += f\"Aluno Dúvida: {duvida_aluno}\\n\"\n",
        "            historico_duvidas += f\"Professor Dúvidas: {resposta_do_agente_duvidas}\\n\"\n",
        "            historico_duvidas += \"---\\n\" # Separador no histórico\n",
        "\n",
        "            display(to_markdown(resposta_do_agente_duvidas)) # Exibe a resposta do agente\n",
        "            print(\"---\\n\") # Separador visual no console\n",
        "\n",
        "\n",
        "        # --- Fim do Loop de Dúvidas ---\n",
        "        print(\"\\n✅ Sessão de Dúvidas Encerrada.\")\n",
        "        print(\"-\" * 60)\n",
        "\n",
        "\n",
        "        # --- 6. Lógica para Salvar em Arquivo Local ---\n",
        "        # O Agente Salvador Local é usado para FAZER a pergunta sobre salvar.\n",
        "        # A lógica de salvamento é executada no script principal.\n",
        "\n",
        "        agente_salvador_local_obj = criar_agente_salvador_local()\n",
        "\n",
        "        # Prepara todo o conteúdo da sessão para possivelmente salvar localmente\n",
        "        # Inclui o histórico das dúvidas\n",
        "        conteudo_completo_sessao = f\"\"\"\n",
        "# Relatório da Sessão de Estudo: {topico_estudo}\n",
        "\n",
        "**Data:** {data_de_hoje}\n",
        "**Perfil do Aluno:** {perfil_do_aluno_sumarizado}\n",
        "\n",
        "---\n",
        "\n",
        "## Conteúdo da Aula\n",
        "\n",
        "{texto_final_aula}\n",
        "\n",
        "---\n",
        "\n",
        "## Resumo e Materiais Adicionais\n",
        "\n",
        "{material_revisao}\n",
        "\n",
        "---\n",
        "\n",
        "## Histórico da Sessão de Dúvidas\n",
        "\n",
        "{historico_duvidas.strip() if historico_duvidas.strip() else \"Nenhum histórico de dúvidas registrado.\"}\n",
        "\n",
        "---\n",
        "\n",
        "\"\"\" # Concatena todo o conteúdo relevante, incluindo o histórico das dúvidas\n",
        "\n",
        "        print(\"\\n💾 Finalizando a sessão de estudo e preparando para salvar...\")\n",
        "        print(\"Chamando o Agente Salvador para perguntar sobre salvar...\")\n",
        "\n",
        "        # Chama o Agente Salvador Local para fazer a pergunta.\n",
        "        # Passamos uma amostra do conteúdo como contexto, embora ele só precise da instrução para perguntar.\n",
        "        entrada_para_salvador_local = f\"\"\"\n",
        "CONTEÚDO COMPLETO DA SESSÃO (amostra):\n",
        "{conteudo_completo_sessao[:1500]} # Amostra do conteúdo\n",
        "---\n",
        "Por favor, faça a pergunta sobre salvar o conteúdo completo desta sessão em um arquivo local.\n",
        "\"\"\"\n",
        "\n",
        "        pergunta_do_salvador = call_agent(\n",
        "            agente_salvador_local_obj,\n",
        "            entrada_para_salvador_local # Passa o contexto para a pergunta\n",
        "        )\n",
        "        display(to_markdown(pergunta_do_salvador)) # Exibe a pergunta sobre salvar localmente\n",
        "\n",
        "        # --- Lógica para Capturar a Resposta do Usuário e EXECUTAR A AÇÃO DE SALVAR (FORA DO AGENTE) ---\n",
        "        # Pergunta diretamente ao usuário no script principal se deseja salvar\n",
        "        resposta_salvar = input(\"\\nPor favor, digite 'Sim' para salvar o arquivo local ou 'Não' para pular: \").strip().lower()\n",
        "\n",
        "        if resposta_salvar == 'sim':\n",
        "            print(\"\\nOk! Preparando para salvar o conteúdo da sessão em um arquivo local...\")\n",
        "\n",
        "            # --- IMPLEMENTAÇÃO SIMPLES: Salvar em um arquivo .md no ambiente Colab ---\n",
        "            # Define o nome do arquivo\n",
        "            nome_arquivo_local = f\"Sessao_Estudo_{topico_estudo.replace(' ', '_').replace('/', '-')}_{date.today().strftime('%Y%m%d')}.md\"\n",
        "            try:\n",
        "                 # Abre o arquivo em modo de escrita ('w') com encoding UTF-8\n",
        "                 with open(nome_arquivo_local, \"w\", encoding=\"utf-8\") as f:\n",
        "                     f.write(conteudo_completo_sessao) # Escreve TODO o conteúdo concatenado\n",
        "                 print(f\"✅ Conteúdo salvo com sucesso em '{nome_arquivo_local}' no seu ambiente Colab.\")\n",
        "                 print(\"Você pode encontrar e baixar este arquivo na barra lateral do Colab (ícone de pasta -> 📁).\")\n",
        "            except Exception as e:\n",
        "                 print(f\"❌ Ocorreu um erro ao tentar salvar o arquivo local: {e}\")\n",
        "\n",
        "        else: # Este else deve estar alinhado com o if resposta_salvar == 'sim':\n",
        "            print(\"\\nOk, o conteúdo da sessão de estudo não será salvo neste momento.\")\n",
        "\n",
        "        print(\"\\n--- 👋 Fim da Sessão de Estudo Interativo! 👋 ---\")\n",
        "        print(\"-\" * 60)\n",
        "\n",
        "# --- Fim do Bloco Principal ---"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MMwWw5SnqhfO",
        "outputId": "4a585216-82a0-4225-993d-bd4b71a8c8e9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "📚 Iniciando o Sistema de Aprendizado Interativo com Agentes 🤖\n",
            "------------------------------------------------------------\n"
          ]
        }
      ]
    }
  ]
}